= Consent

Consent is an access control abstraction layer for ActionController. It lets you restrict access
to actions across your application using a single rules file, rather than scattering access
logic across your controllers using verify() and method-specific logic. It acts as a single
before_filter to all your controllers and checks whether an action can run according to the
rules you've set.


== Examples

On installation, Consent adds a file to your app at config/consent.rb. This file is where you
write the access control rules for your application. You should see a block beginning:

  Consent.rules do

You should write all your rules inside this block. In general, rules are defined using the
controller and action name, and a block that should return true/false. The block will have
access to the +request+, +params+ and +session+ objects that you would find in the controller,
so you can use these to determine whether the action should run (true) or be blocked (false).

For example, say you had an action <tt>SiteController#hello</tt>, and you wanted to restrict it so
that it could only be accessed using Ajax requests. The rule for that would be:

  site.hello { request.xhr? }

You can optionally set parameters to narrow the scope of the rule. Say we only want this
check to take place if the param "id" is set to 12:

  site.hello(:id => 12) { request.xhr? }

Parameter values do not have to be exact values, they can also be ranges or regexes:

  site.hello(:name => /foo/i, :id => 4..17) { request.xhr? }

For a rule to apply, all the parameters listed must be present in the request. When a request
is made, all the rules that match it are checked and if any of them return false, the request
is denied.

Consent also allows rules for entire controllers, rather than for single actions. Simply omit
the method name to get a rule for all actions in a controller.

  profiles { session[:user] ? true : false }
  
  users(:id => 0) { false }


=== One rule, multiple actions

You may want to use a single piece of logic to restrict access to several actions. To do
this, use the +restrict+ method. This takes one or more action expressions and a block.
Consent will apply the block to all actions listed when a request is made. For example,
this rule checks that the request uses POST for the following requests:

* Any request to <tt>SiteController#hello</tt>
* Requests to <tt>SiteController#goodbye</tt> where +id+ is alphabetic
* Any request to any action in <tt>ProfilesController</tt>
* Requests to any action in <tt>UsersController</tt> where +name+ is <tt>"jcoglan"</tt>

    restrict(
      site.hello,
      site.goodbye(:id => /^[a-z]*$/i),
      profiles,
      users(:name => 'jcoglan') ) { request.post? }


=== Nested controllers

If you have controllers nested in modules (and kept in subdirectories of app/controllers in
the filesystem) you can address these controllers using the <tt>/</tt> operator. For example,
to write a rule for <tt>Ajax::MapsController#find</tt>:

  ajax/maps.find { session[:user] && request.get? }


=== HTTP method filters

There are helper methods for restricting the HTTP methods by which actions can be accessed.
Simply state the verb, and list the actions you want to restrict to use only that verb:

  get posts.search,
      tags.list,
      ajax/maps     # this line addresses a whole controller
  
  post profiles.update,
       users.delete


=== Helper methods

To make it easier to write clean rules and reduce repetition, Consent allows you to define
helper methods in the rule block that you can then use within rules to make decisions. For
example, let's say we want a method to grab the current user from the session:

  helper(:user) { User.find(session[:user_id]) }

We can then use this helper in our rules:

  profiles.update { user && user.is_admin? }


== Copyright

Copyright (c) 2009 James Coglan, released under the MIT license
